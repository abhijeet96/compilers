PROGRAM : COMPSTMT
T : ";" | "\n"
COMPSTMT : STMT {T EXPR} [T]
STMT : STMT if EXPR | STMT while EXPR | EXPR
EXPR : return CALL_ARGS | EXPR and EXPR | EXPR or EXPR | not EXPR | COMMAND | ! COMMAND | ARG

ARG : VARIABLE = ARG | VARIABLE OP_ASGN ARG | ARG .. ARG | ARG + ARG | ARG - ARG | ARG * ARG | ARG / ARG | ARG % ARG | ARG ** ARG | + ARG | - ARG | ARG "|" ARG | ARG ˆ ARG | ARG & ARG | ARG > ARG | ARG >= ARG | ARG < ARG | ARG <= ARG | ARG == ARG | ARG != ARG | ! ARG | ARG && ARG | ARG || ARG | PRIMARY

FUNCTION : OPERATION ["(" [CALL_ARGS] ")"]
COMMAND : OPERATION CALL_ARGS
CALL_ARGS : ARGS | * ARG | COMMAND
ARGS : ARG (, ARG)*
ARGDECL : "(" ARGLIST ")" | ARGLIST T
ARGLIST : IDENTIFIER(,IDENTIFIER)*[, *[IDENTIFIER]] | *IDENTIFIER

PRIMARY: LITERAL | VARIABLE | if EXPR THEN COMPSTMT {elsif EXPR THEN COMPSTMT}[else COMPSTMT] end | while EXPR DO COMPSTMT end | for VARIABLE in EXPR DO COMPSTMT end | def FNAME ARGDECL COMPSTMT end | FUNCTION |  "[" [ARGS [,]] "]" | return ["(" [CALL_ARGS] ")"]

THEN : T | then | T then
DO : T | do | T do

OPERATION:IDENTIFIER[!|?]
FNAME : IDENTIFIER

VARIABLE : GLOBAL | @IDENTIFIER | IDENTIFIER
GLOBAL : $IDENTIFIER | $any_char | $-any_char
STRING : " {any_char} " | ‘ {any_char} ‘
IDENTIFIER : sequence in /[a-zA-Z_]{a-zA-Z0-9_}/



